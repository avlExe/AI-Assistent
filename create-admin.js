const { PrismaClient } = require('@prisma/client')
const bcrypt = require('bcryptjs')

const prisma = new PrismaClient()

async function createAdmin() {
  try {
    console.log('üîê –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞...')
    
    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash('password123', 10)
    
    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
    const admin = await prisma.user.upsert({
      where: { email: 'admin@ai-assistent.ru' },
      update: {
        name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        password: hashedPassword,
        role: 'ADMIN'
      },
      create: {
        email: 'admin@ai-assistent.ru',
        name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        password: hashedPassword,
        role: 'ADMIN',
      },
    })
    
    console.log('‚úÖ –ê–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
    console.log('üìß Email:', admin.email)
    console.log('üë§ –ò–º—è:', admin.name)
    console.log('üîë –ü–∞—Ä–æ–ª—å: password123')
    console.log('üé≠ –†–æ–ª—å:', admin.role)
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

createAdmin()
