generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  name              String
  password          String
  role              String             @default("STUDENT")
  avatar            String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  achievements      Achievement[]
  comments          Comment[]
  examResults       ExamResult[]
  childRelation     Parent?            @relation("ParentChild")
  parentRelation    Parent?            @relation("StudentParent")
  reports           Report[]
  savedInstitutions SavedInstitution[]

  @@map("users")
}

model Institution {
  id          String             @id @default(cuid())
  name        String
  description String
  type        String
  direction   String
  minScore    Int
  website     String?
  logo        String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  programs    Program[]
  savedBy     SavedInstitution[]

  @@map("institutions")
}

model Program {
  id            String      @id @default(cuid())
  name          String
  description   String
  faculty       String
  requirements  String
  exams         String
  institutionId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  institution   Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade)

  @@map("programs")
}

model Report {
  id              String   @id @default(cuid())
  title           String
  content         String
  recommendations String
  userId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model Achievement {
  id          String   @id @default(cuid())
  title       String
  description String
  type        String
  userId      String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("achievements")
}

model ExamResult {
  id       String   @id @default(cuid())
  subject  String
  score    Int
  examType String
  userId   String
  date     DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("exam_results")
}

model Parent {
  id        String   @id @default(cuid())
  parentId  String   @unique
  studentId String   @unique
  createdAt DateTime @default(now())
  parent    User     @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  student   User     @relation("StudentParent", fields: [studentId], references: [id], onDelete: Cascade)

  @@map("parents")
}

model SavedInstitution {
  id            String      @id @default(cuid())
  userId        String
  institutionId String
  createdAt     DateTime    @default(now())
  institution   Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, institutionId])
  @@map("saved_institutions")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}
