'use client'

import { useState, useRef, useEffect } from 'react'
import { useSession } from 'next-auth/react'
import { Card, CardContent, CardHeader, CardTitle, NeomorphicCard } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input, NeomorphicInput } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { 
  Brain, 
  Send, 
  User, 
  Bot, 
  Loader2,
  FileText,
  TrendingUp,
  Target,
  BookOpen,
  Star
} from 'lucide-react'

interface Message {
  id: string
  role: 'user' | 'assistant'
  content: string
  timestamp: Date
  type?: 'analysis' | 'recommendation' | 'general'
}

export default function AssistantPage() {
  const { data: session } = useSession()
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      role: 'assistant',
      content: '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º:\n\n‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ï–ì–≠/–û–ì–≠\n‚Ä¢ –ü–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤—É–∑—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\n‚Ä¢ –î–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ\n‚Ä¢ –û—Ü–µ–Ω–∏—Ç—å —à–∞–Ω—Å—ã –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ\n\n–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å?',
      timestamp: new Date(),
      type: 'general'
    }
  ])
  const [input, setInput] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const handleSendMessage = async () => {
    if (!input.trim() || isLoading) return

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: input,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    setInput('')
    setIsLoading(true)

    try {
      // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      const assistantResponse = generateAIResponse(input)
      
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: assistantResponse.content,
        timestamp: new Date(),
        type: assistantResponse.type
      }

      setMessages(prev => [...prev, assistantMessage])
    } catch (error) {
      console.error('Error sending message:', error)
    } finally {
      setIsLoading(false)
    }
  }

  const generateAIResponse = (userInput: string) => {
    const input = userInput.toLowerCase()
    
    if (input.includes('–µ–≥—ç') || input.includes('—ç–∫–∑–∞–º–µ–Ω') || input.includes('–±–∞–ª–ª')) {
      return {
        content: `üìä **–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ï–ì–≠**

–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:
‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞: 85 –±–∞–ª–ª–æ–≤
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞: 90 –±–∞–ª–ª–æ–≤  
‚Ä¢ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫: 88 –±–∞–ª–ª–æ–≤

**–û–±—â–∏–π –±–∞–ª–ª: 263**

üéØ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
1. –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –ø—Ä–µ—Ç–µ–Ω–¥–æ–≤–∞—Ç—å –Ω–∞ –±—é–¥–∂–µ—Ç–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ —Ç–æ–ø–æ–≤—ã—Ö –≤—É–∑–∞—Ö
2. –û—Å–æ–±–µ–Ω–Ω–æ —Å–∏–ª—å–Ω—ã –≤ IT-–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö
3. –†–µ–∫–æ–º–µ–Ω–¥—É—é —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ú–§–¢–ò, –ò–¢–ú–û, –í–®–≠

–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º?`,
        type: 'analysis' as const
      }
    }
    
    if (input.includes('–≤—É–∑') || input.includes('—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç') || input.includes('–∫–æ–ª–ª–µ–¥–∂')) {
      return {
        content: `üèõÔ∏è **–ü–æ–¥–±–æ—Ä —É—á–µ–±–Ω—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π**

–ò—Å—Ö–æ–¥—è –∏–∑ –≤–∞—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:

**–¢–æ–ø-—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã:**
1. **–ú–§–¢–ò** - –ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞
   - –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª: 290
   - –í–∞—à–∏ —à–∞–Ω—Å—ã: 85%

2. **–ò–¢–ú–û** - –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è  
   - –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª: 280
   - –í–∞—à–∏ —à–∞–Ω—Å—ã: 90%

3. **–í–®–≠** - –ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞
   - –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª: 270
   - –í–∞—à–∏ —à–∞–Ω—Å—ã: 95%

**–ö–æ–ª–ª–µ–¥–∂–∏ (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç):**
‚Ä¢ –ö–æ–ª–ª–µ–¥–∂ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –ú–æ—Å–∫–æ–≤—Å–∫–∏–π –∫–æ–ª–ª–µ–¥–∂ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∞–≤–∞

–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –ø–æ–¥–∞—á–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤?`,
        type: 'recommendation' as const
      }
    }
    
    if (input.includes('–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞') || input.includes('–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è')) {
      return {
        content: `üìö **–ü–ª–∞–Ω –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏**

**–î–æ —ç–∫–∑–∞–º–µ–Ω–æ–≤ (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–¥–∞–≤–∞–ª–∏):**
1. **–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞** - —Ä–µ—à–∞–π—Ç–µ –∑–∞–¥–∞—á–∏ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
2. **–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞** - –∏–∑—É—á–∞–π—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
3. **–†—É—Å—Å–∫–∏–π —è–∑—ã–∫** - —Ç—Ä–µ–Ω–∏—Ä—É–π—Ç–µ —Å–æ—á–∏–Ω–µ–Ω–∏—è

**–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:**
1. –ü–æ–¥–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ 5 –≤—É–∑–æ–≤
2. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∏—Å–ø—ã—Ç–∞–Ω–∏—è–º
3. –ò–∑—É—á–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è

**–ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:**
‚Ä¢ –†–µ—à—É –ï–ì–≠
‚Ä¢ –§–ò–ü–ò
‚Ä¢ –û–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã –≤—É–∑–æ–≤

–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º?`,
        type: 'recommendation' as const
      }
    }
    
    return {
      content: `ü§ñ –Ø –ø–æ–Ω–∏–º–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å. –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –º–Ω–µ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:

‚Ä¢ –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ï–ì–≠/–û–ì–≠
‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏  
‚Ä¢ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –≤—É–∑–∞–º
‚Ä¢ –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è

–ó–∞–¥–∞–π—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –∏ —è –¥–∞–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!`,
      type: 'general' as const
    }
  }

  const quickActions = [
    {
      title: '–ê–Ω–∞–ª–∏–∑ –ï–ì–≠',
      description: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã',
      icon: TrendingUp,
      action: () => setInput('–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ï–ì–≠')
    },
    {
      title: '–ü–æ–¥–±–æ—Ä –≤—É–∑–æ–≤',
      description: '–ù–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —É—á–µ–±–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è',
      icon: BookOpen,
      action: () => setInput('–ü–æ–¥–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤—É–∑—ã –¥–ª—è –º–µ–Ω—è')
    },
    {
      title: '–ü–ª–∞–Ω –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏',
      description: '–°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏',
      icon: Target,
      action: () => setInput('–°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é')
    }
  ]

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      {/* Header */}
      <div className="text-center">
        <h1 className="text-3xl font-bold gradient-text mb-2">
          –ò–ò-–ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é
        </h1>
        <p className="text-gray-600 dark:text-gray-300">
          –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—É–∑–∞ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        </p>
      </div>

      {/* Quick Actions */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        {quickActions.map((action, index) => (
          <NeomorphicCard 
            key={index} 
            className="p-4 cursor-pointer hover:shadow-lg transition-all duration-300"
            onClick={action.action}
          >
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-gradient-primary rounded-lg flex items-center justify-center">
                <action.icon className="w-5 h-5 text-white" />
              </div>
              <div>
                <h3 className="font-semibold text-gray-900 dark:text-gray-100">{action.title}</h3>
                <p className="text-sm text-gray-600 dark:text-gray-400">{action.description}</p>
              </div>
            </div>
          </NeomorphicCard>
        ))}
      </div>

      {/* Chat Interface */}
      <Card className="h-[600px] flex flex-col">
        <CardHeader className="border-b">
          <CardTitle className="flex items-center space-x-2">
            <Brain className="w-6 h-6" />
            <span>–ß–∞—Ç —Å –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–æ–º</span>
          </CardTitle>
        </CardHeader>
        <CardContent className="flex-1 flex flex-col p-0">
          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-6 space-y-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div
                  className={`max-w-[80%] rounded-2xl p-4 ${
                    message.role === 'user'
                      ? 'bg-gradient-primary text-white'
                      : 'bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-gray-100'
                  }`}
                >
                  <div className="flex items-start space-x-2">
                    {message.role === 'assistant' && (
                      <div className="w-6 h-6 bg-gradient-primary rounded-full flex items-center justify-center flex-shrink-0 mt-1">
                        <Bot className="w-3 h-3 text-white" />
                      </div>
                    )}
                    <div className="flex-1">
                      <div className="whitespace-pre-wrap text-sm">{message.content}</div>
                      <div className="text-xs opacity-70 mt-2">
                        {message.timestamp.toLocaleTimeString('ru-RU', { 
                          hour: '2-digit', 
                          minute: '2-digit' 
                        })}
                      </div>
                    </div>
                    {message.role === 'user' && (
                      <div className="w-6 h-6 bg-white/20 rounded-full flex items-center justify-center flex-shrink-0 mt-1">
                        <User className="w-3 h-3 text-white" />
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))}
            
            {isLoading && (
              <div className="flex justify-start">
                <div className="bg-gray-100 dark:bg-gray-800 rounded-2xl p-4">
                  <div className="flex items-center space-x-2">
                    <div className="w-6 h-6 bg-gradient-primary rounded-full flex items-center justify-center">
                      <Bot className="w-3 h-3 text-white" />
                    </div>
                    <div className="flex items-center space-x-1">
                      <Loader2 className="w-4 h-4 animate-spin" />
                      <span className="text-sm text-gray-600 dark:text-gray-400">–î—É–º–∞—é...</span>
                    </div>
                  </div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          {/* Input */}
          <div className="border-t p-4">
            <div className="flex space-x-2">
              <NeomorphicInput
                value={input}
                onChange={(e) => setInput(e.target.value)}
                placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏..."
                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                className="flex-1"
              />
              <Button
                onClick={handleSendMessage}
                disabled={!input.trim() || isLoading}
                variant="gradient"
                size="icon"
              >
                <Send className="w-4 h-4" />
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

